---
description: Guidelines for organizing TypeScript types and interfaces in the project
globs: "**/*.ts,**/*.tsx"
alwaysApply: false
---
# TypeScript Types Organization

## Core Guidelines

1. **Centralized Type Definitions**
   - Define interfaces and types in dedicated type files (`types.ts`) rather than implementation files
   - Each module should have its own types file for domain-specific types

2. **Type File Structure**
   - Group related types and interfaces together
   - Export all types explicitly
   - Use descriptive names that clearly indicate the purpose

## Implementation

```typescript
// ✅ GOOD: Types defined in dedicated files
// file: models/types.ts
export interface ModelConfig {
  id: string;
  name: string;
  // other properties
}

export type MessageRole = "system" | "user" | "assistant";

// ❌ BAD: Types defined directly in implementation files
// file: models/openrouter.ts
interface ModelConfig { // Should be in types.ts instead
  id: string; 
  name: string;
}

function getCompletion() { /* ... */ }
```

## Benefits

- Improves code organization and maintainability
- Makes type definitions more discoverable
- Reduces duplication across files
- Simplifies imports and dependency management 